#!/bin/bash

version="0.4"
tmpfile="/tmp/.zerocli.tmp"
datafile="/tmp/.zerocli.data"
curloutput="/tmp/.zerocli.curl.out"
curlerr="/tmp/.zerocli.curl.err"
server=""
me=$(basename $0)
path=$(dirname $0)
workingdir=""
config=""

ttw=10
burn=0
open=0
syntax=0
expire=1week
get=0
post=1
quiet=0
group=0
file=""
atime="5min 10min 1hour 1day 1week 1month 1year never"
engine=$(which rhino)
engineopts="rhino"

# search for a config file and load it if present
if [ -d "$path" -a -e "$path/zerocli.conf" ]; then
	. "$path/zerocli.conf"
fi

if [ ! -z "$config" -a -e "$config" ]; then
	. "$config"
fi

if [ -f "$HOME/.zeroclirc" ]; then
	. "$HOME/.zeroclirc"
fi

# set the path variable based on the $workingdir variable
function setpath() {
	if [ ! -z "$workingdir" ]; then
		[ ! -d "$workingdir" ] && {
			cat <<EOF
Error: '$workingdir' no such directory
EOF
			exit 1
		}   
		path=$workingdir
	else
		if [ "$path" != "." ]; then
			echo $path | grep -e "^/" &>/dev/null || {
				path=$(which $me)
				[ -z "$path" ] && {
					cat <<EOF
Error: no working dir found
You can solve this problem either by calling this program with an absolute path
or by adding the script to your PATH or by setting up the 'workingdir' variable
into the script or conf file
EOF
					exit 1
				}   
			}   
		fi  
	fi
}

# DO NOT EDIT THE FOLLOWING LINE!
package='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
'

[ ! -x "$engine" ] && {
	myerror "Error: '$engine' not found or not executable"
	exit 1
}

# Check for curl
curl=$(which curl)
[ ! -x "$curl" ] && {
	myerror "Please install curl"
	exit 1
}

# function to extract the archive contained in $package (you can generate a self extractible archive using the compact.sh script)
function unpak() {
	[ -z "$package" ] && return
	required="js/zerocli.js js/base64.js js/flate.js js/rawdeflate.js js/rawinflate.js js/sjcl.js main.js VERSION"
	br=0
	for f in $required; do
		[ ! -f "$path/$f" ] && {
			mylog "missing '$path/$f'"
			rm -rf "$path/main.js" "$path/js" "$path/VERSION" &>/dev/null
			br=1
			break
		}
	done
	v=$(cat $path/VERSION 2>/dev/null)
	[ $br -eq 0 -a "$v" = "$version" ] && return
	mylog "Extracting files '$v' -> '$version'"
	# if $br = 1 or version mismatch at least 1 file is missing so we unpack the archive
	sav=$PWD
	cd $path || exit $?
	echo "$package" | base64 -d >package.tgz
	tar xzf package.tgz
	rm package.tgz
	cd $sav
}

# prints a log unless $quiet = 1
function mylog() {
	[ $quiet -ne 1 ] && echo "[i] $*" >&2
}

# prints error in all cases
function myerror() {
	echo "[e] $*" >&2
}

# prints the help menu and exit
function usage() {
	cat <<EOF
$me [options...] [files...]
usage:
	-c, --config <file>   use this configuration file
	-q, --quiet           do not display logs
	-b, --burn            burn after reading
	-o, --open            open discussion
	-s, --syntax          syntax coloring
	-e, --expire <time>   specify the expiration time (default: 1week)
	-f, --file <file>     file to send, you can have multiple (default: read from stdin)
	-g, --get <url>       get data from URL
	-G, --group           group all the specified files
	-p, --post            post data to server (it is the default behaviour)
	-S, --server <server> specify the server url
	-t, --ttw             time to wait between two posts (default: 10)
	-h, --help            prints this menu and exit

available time settings:
5min,10min,1hour,1day,1week,1month,1year,never
EOF
	exit 1
}

# check if the file we want to send is not empty
function testfile() {
	file=$1
	size=$(ls -l $file | awk '{print $5; }')
	test "$size" = "0" && {
		myerror "Could not send empty file"
		[ -f $tmpfile ] && rm $tmpfile
		exit 2
	}
}

# options may be followed by one colon to indicate they have a required argument
options=$(getopt -n "$me" -o "Ghpqbose:f:g:S:c:t::" -l "group,help,put,quiet,burn,open,syntax,expire:,file:,get:,server:,config:,ttw::" -- "$@") || {
	# something went wrong, getopt will put out an error message for us
	usage
}

set -- $options

if [ "$(getopt --version)" = " --" ]; then
	# bsd getopt - skip configuration declarations
	nb_delims_to_remove=2
	while [ $# -gt 0 ]; do
		if [ $1 = "--" ]; then
			shift
			nb_delims_to_remove=$(expr $nb_delims_to_remove - 1)
			if [ $nb_delims_to_remove -lt 1 ]; then
				break
			fi
		fi

		shift
	done
fi

while [ $# -gt 0 ]
do
	case $1 in
		-q|--quiet) quiet=1 ;;
		-b|--burn) burn=1 ;;
		-o|--open) open=1 ;;
		-s|--syntax) syntax=1 ;;
		-p|--post) post=1 ;;
		-h|--help) usage ;;
		-G|--group) group=1 ;;
		# for options with required arguments, an additional shift is required
		-e|--expire) 
			expire=$(echo $2 | sed "s/^.//;s/.$//")
			shift
			t=0
			for e in $atime; do
				if [ "$expire" = "$e" ]; then
					t=1
					break
				fi
			done
			[ $t -ne 1 ] && {
				myerror "Error: '$expire' is not a valid expiration time"
				exit 1
			}
			;;
		-f|--file) file="$file $2" ; shift ;; #$(echo $2 | sed "s/^.//;s/.$//") ; shift ;;
		-g|--get) get=$(echo $2 | sed "s/^.//;s/.$//") ; shift ;;
		-S|--server) server=$(echo $2 | sed "s/^.//;s/.$//") ; shift ;;
		-t|--ttw) ttw=$(echo $2 | sed "s/^.//;s/.$//") ; shift ;;
		-c|--config) 
			config=$(echo $2 | sed "s/^.//;s/.$//")
			shift
			[ ! -e "$config" ] && {
				myerror "Error: '$config' does not exist"
				exit
			}
			. "$config"
			;;
		(--) shift; break ;;
		(-*) myerror "$me: error - unrecognized option $1"; usage ;;
		(*) break ;;
	esac
	shift
done

for arg do file="$file $arg" ; done

setpath

unpak

# verify we have a server address to post data
[ -z "$server" -a "$get" = "0" ] && {
	myerror "Error: You must specify a server in order to post data"
	myerror "You can set it in the script or use the -S argument or the config file"
	exit 1
}

# function that post or get data using curl
function mycurl() {
	url=$1
	data=$2
	if [ -z "$data" ]; then
		output=$($curl -i                                         \
			 -o $curloutput                                       \
			 --stderr $curlerr                                    \
			 $url)
		ret=$?
	else
		output=$(echo -n "$data" | $curl -i                       \
			 -H "Content-Type: application/x-www-form-urlencoded" \
			 -X POST                                              \
			 -d @-                                                \
			 -o $curloutput                                       \
			 --stderr $curlerr                                    \
			 $url)
		ret=$?
	fi
		
	# check the return code
	[ $ret -ne 0 ] && {
		myerror "Error: curl returned $ret"
		myerror "Please refer to curl manpage for more details"
		cat $curlerr >&2
		rm $curlerr $curloutput &>/dev/null
		exit $ret
	}

	# check the HTTP return code
	code=$(grep -e "^HTTP/1\." $curloutput | tail -1 | awk '{print $2;}')
	case $code in
		200)
			[ -z "$data" ] && return
			# When we post data, we expect the Content-Type to be application/json
			ct=$(grep "^Content-Type:" $curloutput | awk '{print $2;}' | perl -pe "s/\r\n$//")
			[ -z "$ct" -o "$ct" != "application/json" ] && {
				myerror "Error: server returned code $code but with content-type '$ct' where 'application/json' is expected"
#				cat $curloutput >&2
				rm $curlerr $curloutput &>/dev/null
				exit 6
			}
			mylog "OK server returned code 200" ;;
		302|301)
			redirect=$(grep "^Location:" $curloutput | awk '{print $2;}' | perl -pe "s/\r\n$//")
			mylog "Got a redirection $code to '$redirect'"
			mylog "retrying..."
			mycurl "$redirect" "$data"
			;;
		*) 
			myerror "Error: server returned $code"
			myerror "Please read this page for more details about HTTP return code: http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
			rm $curlerr $curloutput &>/dev/null
			exit 5
			;;
	esac
}

# function that post data
# it cat take a list of file as argument and will send them recursively
function post() {
	myfile=$1
	[ -z "$myfile" ] && {
		cat >$tmpfile <&0
		myfile=$tmpfile
	}

	i=0
	for f in $myfile; do
		i=$(($i+1))
		[ $i -eq 2 ] && break
	done

	[ $i -eq 2 ] && {
		for f in $myfile; do
			if [ $group -eq 0 ]; then
				post $f
				# by default ZeroBin expect us to wait 10s between each post
				mylog "waiting $ttw seconds before next post"
				sleep $ttw
			else
				tmp=$(echo $f | sed "s/^.//;s/.$//")
				cat $tmp >>$tmpfile
				myfile=$tmpfile
			fi
		done
		[ $group -eq 0 ] && return
	}

	[ "$myfile" != "$tmpfile" ] && myfile=$(echo $myfile | sed "s/^.//;s/.$//")

	testfile $myfile
	
	$engine "$path/main.js" $engineopts "$path/" "post" "$myfile" 2>&1 >$datafile &
	pid=$!

	[ $quiet -ne 1 ] && echo >&2

	dot=".  "
	while ps $pid &>/dev/null; do
		[ $quiet -ne 1 ] && echo -n -e "\rEncrypting data$dot" >&2
		case $dot in
			".  ") dot=".. " ;;
			".. ") dot="..." ;;
			"...") dot=".  " ;;
		esac
		sleep 1
	done

	[ -f $tmpfile ] && rm $tmpfile

	wait $pid
	ret=$?
	[ $ret -ne 0 ] && {
		[ $quiet -ne 1 ] && echo -e "\rEncrypting data... [failed]" >&2
		myerror "Error: javascript engine returned $ret"
		cat $datafile >&2
		rm $datafile
		exit $ret
	}

	[ $quiet -ne 1 ] && echo -e "\rEncrypting data... [done]" >&2

	key=$(grep "key:" $datafile | sed "s/^key://")

	# we need to 'htmlencode' our data before posting them. We use this hack to handle large data
	encode=$(perl -MURI::Escape -e '@f=<>; foreach (@f) { if (m/^data:/) { s/^data://; print uri_escape($_); exit(0); } }' $datafile)
	rm $datafile
	params="data=$encode&burnafterreading=$burn&expire=$expire&opendiscussion=$open&syntaxcoloring=$syntax"

	mycurl "$server" "$params"

	status=$(tail -1 $curloutput | sed -r 's/^.*"status":([0-9]).*$/\1/');
	[ -z "$status" -o "$status" != "0" ] && {
		myerror "something went wrong..."
		cat $curloutput >&2
		rm $curlerr $curloutput &>/dev/null
		exit 4
	}
	id=$(tail -1 $curloutput | sed -r 's/^.*"id":"([^"]+)".*$/\1/');
	deletetoken=$(tail -1 $curloutput | sed -r 's/^.*"deletetoken":"([^"]+)".*$/\1/');

	# add a / in server if not present
	server=$(echo $server | sed -r "s|^(.+[^/])$|\1/|")

	if [ "$myfile" = "$tmpfile" ]; then
		echo "Your data have been successfully pasted"
	else
		echo "The file '$myfile' has been successfully pasted"
	fi
	echo "url: $server?$id#$key"
	echo "delete url: $server?pasteid=$id&deletetoken=$deletetoken"

	rm $curlerr $curloutput &>/dev/null
}

function get() {

	echo $get | grep -E "^.*\?.*#(.+)$" &>/dev/null
	[ $? -ne 0 ] && {
		myerror "Error: missing key to decrypt data"
		exit 7
	}
	key=$(echo $get | sed -r "s/^.*\?.*#(.+)$/\1/")
	mycurl "$get"
	str=$(grep "cipherdata" $curloutput)
	rm $curlerr $curloutput &>/dev/null
	data=$(echo $str | grep ">\[.*\]<")
	[ -z "$data" ] && {
		myerror "Paste does not exist is expired or has been removed"
		exit 3
	}
	clean=$(echo $str | sed -r "s/^.*(\[.*)$/\1/;s/^(.*\]).*$/\1/")
	echo $clean | sed -r "s/^.*data\":(.*),\"meta.*$/\1/;s/\\\\//g;s/^[^{]*//;s/[^}]*$//;s/\s*$//" >$tmpfile

	$engine "$path/main.js" $engineopts "$path/" "get" "$key" "$tmpfile" 2>&1 >$datafile &
	pid=$!

	dot=".  "
	while ps $pid &>/dev/null; do
		[ $quiet -ne 1 ] && echo -n -e "\rDecrypting data$dot" >&2
		case $dot in
			".  ") dot=".. " ;;
			".. ") dot="..." ;;
			"...") dot=".  " ;;
		esac
		sleep 1
	done

	wait $pid
	ret=$?
	rm $tmpfile
	[ $ret -ne 0 ] && {
		[ $quiet -ne 1 ] && echo -e "\rDecrypting data... [failed]" >&2
		myerror "Error: javascript engine returned $ret"
		cat $datafile >&2
		rm $datafile
		exit $ret
	}

	[ $quiet -ne 1 ] && echo -e "\rDecrypting data... [done]" >&2

	cat $datafile
	rm $datafile

	exit 0
}

# ensure only you (and root) can read the temporary files
umask 0077

[ "$get" != "0" ] && get

>$tmpfile

[ "$post" = "1" ] && post "$file"

exit 0
