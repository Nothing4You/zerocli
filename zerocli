#!/bin/bash

version="0.3"
tmpfile="/tmp/.zerocli.tmp"
datafile="/tmp/.zerocli.data"
curloutput="/tmp/.zerocli.curl.out"
curlerr="/tmp/.zerocli.curl.err"
curltmp="/tmp/.zerocli.curl.tmp"
server=""
me=$(basename $0)
path=$(dirname $0)
workingdir=""
config=""

ttw=10
burn=0
open=0
syntax=0
expire=1week
get=0
post=1
quiet=0
group=0
file=""
atime="5min 10min 1hour 1day 1week 1month 1year never"
engine=$(which rhino)
engineopts="rhino"

# search fo a config file and load it if present
if [ -d "$path" -a -e "$path/zerocli.conf" ]; then
	. "$path/zerocli.conf"
fi

if [ ! -z "$config" -a -e "$config" ]; then
	. "$config"
fi

if [ -f "$HOME/.zeroclirc" ]; then
	. "$HOME/.zeroclirc"
fi

# set the path variable based on the $workingdir variable
function setpath() {
	if [ ! -z "$workingdir" ]; then
		[ ! -d "$workingdir" ] && {
			cat <<EOF
Error: '$workingdir' no such directory
EOF
			exit 1
		}   
		path=$workingdir
	else
		if [ "$path" != "." ]; then
			echo $path | grep -e "^/" &>/dev/null || {
				path=$(which $me)
				[ -z "$path" ] && {
					cat <<EOF
Error: no working dir found
You can solve this problem either by calling this program with an absolute path
or by adding the script to your PATH or by setting up the 'workingdir' variable
into the script or conf file
EOF
					exit 1
				}   
			}   
		fi  
	fi
}

# DO NOT EDIT THE FOLLOWING LINE!
package='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
'

[ ! -x "$engine" ] && {
	myerror "Error: '$engine' not found or not executable"
	exit 1
}

# Check for curl
curl=$(which curl)
[ ! -x "$curl" ] && {
	myerror "Please install curl"
	exit 1
}

# function to extract the archive contained in $package (you can generate a self extractible archive using the compact.sh script)
function unpak() {
	[ -z "$package" ] && return
	required="js/zerocli.js js/base64.js js/flate.js js/rawdeflate.js js/rawinflate.js js/sjcl.js main.js VERSION"
	br=0
	for f in $required; do
		[ ! -f "$path/$f" ] && {
			mylog "missing '$path/$f'"
			rm -rf "$path/main.js" "$path/js" "$path/VERSION" &>/dev/null
			br=1
			break
		}
	done
	v=$(cat $path/VERSION 2>/dev/null)
	[ $br -eq 0 -a "$v" = "$version" ] && return
	mylog "Extracting files '$v' -> '$version'"
	# if $br = 1 or version mismatch at least 1 file is missing so we unpack the archive
	sav=$PWD
	cd $path || exit $?
	echo "$package" | base64 -d >package.tgz
	tar xzf package.tgz
	rm package.tgz
	cd $sav
}

# prints a log unless $quiet = 1
function mylog() {
	[ $quiet -ne 1 ] && echo "[i] $*" >&2
}

# prints error in all cases
function myerror() {
	echo "[e] $*" >&2
}

# prints the help menu and exit
function usage() {
	cat <<EOF
$me [options...] [files...]
usage:
	-c, --config <file>   use this configuration file
	-q, --quiet           do not display logs
	-b, --burn            burn after reading
	-o, --open            open discussion
	-s, --syntax          syntax coloring
	-e, --expire <time>   specify the expiration time (default: 1week)
	-f, --file <file>     file to send, you can have multiple (default: read from stdin)
	-g, --get <url>       get data from URL
	-G, --group           group all the specified files
	-p, --post            post data to server (it is the default behaviour)
	-S, --server <server> specify the server url
	-t, --ttw             time to wait between two posts (default: 10)
	-h, --help            prints this menu and exit

available time settings:
5min,10min,1hour,1day,1week,1month,1year,never
EOF
	exit 1
}

# check if the file we want to send is not empty
function testfile() {
	file=$1
	size=$(ls -l $file | awk '{print $5; }')
	test "$size" = "0" && {
		myerror "Could not send empty file"
		[ -f $tmpfile ] && rm $tmpfile
		exit 2
	}
}

# options may be followed by one colon to indicate they have a required argument
options=$(getopt -n "$me" -o "Ghpqbose:f:g:S:c:t::" -l "group,help,put,quiet,burn,open,syntax,expire:,file:,get:,server:,config:,ttw::" -- "$@") || {
	# something went wrong, getopt will put out an error message for us
	usage
}

set -- $options

if [ "$(getopt --version)" = " --" ]; then
	# bsd getopt - skip configuration declarations
	nb_delims_to_remove=2
	while [ $# -gt 0 ]; do
		if [ $1 = "--" ]; then
			shift
			nb_delims_to_remove=$(expr $nb_delims_to_remove - 1)
			if [ $nb_delims_to_remove -lt 1 ]; then
				break
			fi
		fi

		shift
	done
fi

while [ $# -gt 0 ]
do
	case $1 in
		-q|--quiet) quiet=1 ;;
		-b|--burn) burn=1 ;;
		-o|--open) open=1 ;;
		-s|--syntax) syntax=1 ;;
		-p|--post) post=1 ;;
		-h|--help) usage ;;
		-G|--group) group=1 ;;
		# for options with required arguments, an additional shift is required
		-e|--expire) 
			expire=$(echo $2 | sed "s/^.//;s/.$//")
			shift
			t=0
			for e in $atime; do
				if [ "$expire" = "$e" ]; then
					t=1
					break
				fi
			done
			[ $t -ne 1 ] && {
				myerror "Error: '$expire' is not a valide expiration time"
				exit 1
			}
			;;
		-f|--file) file="$file $2" ; shift ;; #$(echo $2 | sed "s/^.//;s/.$//") ; shift ;;
		-g|--get) get=$(echo $2 | sed "s/^.//;s/.$//") ; shift ;;
		-S|--server) server=$(echo $2 | sed "s/^.//;s/.$//") ; shift ;;
		-t|--ttw) ttw=$(echo $2 | sed "s/^.//;s/.$//") ; shift ;;
		-c|--config) 
			config=$(echo $2 | sed "s/^.//;s/.$//")
			shift
			[ ! -e "$config" ] && {
				myerror "Error: '$config' does not exist"
				exit
			}
			. "$config"
			;;
		(--) shift; break ;;
		(-*) myerror "$me: error - unrecognized option $1"; usage ;;
		(*) break ;;
	esac
	shift
done

for arg do file="$file $arg" ; done

setpath

unpak

# verify we have a server address to post data
[ -z "$server" -a "$get" = "0" ] && {
	myerror "Error: You must specify a server in order to post data"
	myerror "You can set it in the script or use the -S argument or the config file"
	exit 1
}

# function that post or get data using curl
function mycurl() {
	url=$1
	data=$2
	if [ -z "$data" ]; then
		output=$($curl -i                                         \
			 -o $curloutput                                       \
			 --stderr $curlerr                                    \
			 $url)
		ret=$?
	else
		echo "$data" >$curltmp
		output=$($curl -i                                         \
			 -H "Content-Type: application/x-www-form-urlencoded" \
			 -X POST                                              \
			 -d @$curltmp                                         \
			 -o $curloutput                                       \
			 --stderr $curlerr                                    \
			 $url)
		ret=$?
		rm $curltmp
	fi
		
	# check the return code
	[ $ret -ne 0 ] && {
		myerror "Error: curl returned $ret"
		myerror "Please refer to curl manpage for more details"
		cat $curlerr >&2
		rm $curlerr $curloutput &>/dev/null
		exit $ret
	}

	# check the HTTP return code
	code=$(grep -e "^HTTP/1\." $curloutput | tail -1 | awk '{print $2;}')
	case $code in
		200)
			[ -z "$data" ] && return
			# When we post data, we expect the Content-Type to be application/json
			ct=$(grep "^Content-Type:" $curloutput | awk '{print $2;}' | perl -pe "s/\r\n$//")
			[ -z "$ct" -o "$ct" != "application/json" ] && {
				myerror "Error: server returned code $code but with content-type '$ct' where 'application/json' is expected"
				rm $curlerr $curloutput &>/dev/null
				exit 6
			}
			mylog "OK server returned code 200" ;;
		302|301)
			redirect=$(grep "^Location:" $curloutput | awk '{print $2;}' | perl -pe "s/\r\n$//")
			mylog "Got a redirection $code to '$redirect'"
			mylog "retrying..."
			mycurl "$redirect" "$data"
			;;
		*) 
			myerror "Error: server returned $code"
			rm $curlerr $curloutput &>/dev/null
			exit 5
			;;
	esac
}

# function that post data
# it cat take a list of file as argument and will send them recursively
function post() {
	myfile=$1
	[ -z "$myfile" ] && {
		cat >$tmpfile <&0
		myfile=$tmpfile
	}

	i=0
	for f in $myfile; do
		i=$(($i+1))
		[ $i -eq 2 ] && break
	done

	[ $i -eq 2 ] && {
		for f in $myfile; do
			if [ $group -eq 0 ]; then
				post $f
				# by default ZeroBin expect us to wait 10s between each post
				mylog "waiting $ttw seconds before next post"
				sleep $ttw
			else
				tmp=$(echo $f | sed "s/^.//;s/.$//")
				cat $tmp >>$tmpfile
				myfile=$tmpfile
			fi
		done
		[ $group -eq 0 ] && return
	}

	[ "$myfile" != "$tmpfile" ] && myfile=$(echo $myfile | sed "s/^.//;s/.$//")

	testfile $myfile
	
	$engine "$path/main.js" $engineopts "$path/" "post" "$myfile" 2>&1 >$datafile &
	pid=$!

	[ $quiet -ne 1 ] && echo >&2

	dot=".  "
	while ps $pid &>/dev/null; do
		[ $quiet -ne 1 ] && echo -n -e "\rEncrypting data$dot" >&2
		case $dot in
			".  ") dot=".. " ;;
			".. ") dot="..." ;;
			"...") dot=".  " ;;
		esac
		sleep 1
	done

	[ -f $tmpfile ] && rm $tmpfile

	wait $pid
	ret=$?
	[ $ret -ne 0 ] && {
		[ $quiet -ne 1 ] && echo -e "\rEncrypting data... [failed]" >&2
		myerror "Error: javascript engine returned $ret"
		cat $datafile >&2
		rm $datafile
		exit $ret
	}

	[ $quiet -ne 1 ] && echo -e "\rEncrypting data... [done]" >&2

	key=$(grep "key:" $datafile | sed "s/^key://")

	# we need to 'htmlencode' our data before posting them. We use this hack to handle large data
	encode=$(perl -MURI::Escape -e '@f=<>; foreach (@f) { if (m/^data:/) { s/^data://; print uri_escape($_); exit(0); } }' $datafile)
	rm $datafile
	params="data=$encode&burnafterreading=$burn&expire=$expire&opendiscussion=$open&syntaxcoloring=$syntax"

	mycurl "$server" "$params"

	status=$(tail -1 $curloutput | python -m json.tool 2>/dev/null | grep status | cut -d: -f2 | sed "s/ //g");
	[ -z "$status" -o "$status" != "0" ] && {
		myerror "something went wrong..."
		cat $curloutput >&2
		rm $curlerr $curloutput &>/dev/null
		exit 4
	}
	id=$(tail -1 $curloutput | python -m json.tool | grep id | cut -d: -f2 | sed "s/ //g;s/,//g;s/\"//g");
	deletetoken=$(tail -1 $curloutput | python -m json.tool | grep deletetoken | cut -d: -f2 | sed "s/ //g;s/,//g;s/\"//g");

	# add a / in server if not present
	server=$(echo $server | sed -r "s|^(.+[^/])$|\1/|")

	if [ "$myfile" = "$tmpfile" ]; then
		echo "Your data have been successfully pasted"
	else
		echo "The file '$myfile' has been successfully pasted"
	fi
	echo "url: $server?$id#$key"
	echo "delete url: $server?pasteid=$id&deletetoken=$deletetoken"

	rm $curlerr $curloutput &>/dev/null
}

function get() {

	echo $get | grep -E "^.*\?.*#(.+)$" &>/dev/null
	[ $? -ne 0 ] && {
		myerror "Error: missing key to decrypt data"
		exit 7
	}
	key=$(echo $get | sed -r "s/^.*\?.*#(.+)$/\1/")
	mycurl "$get"
	str=$(grep "cipherdata" $curloutput)
	rm $curlerr $curloutput &>/dev/null
	data=$(echo $str | grep ">\[.*\]<")
	[ -z "$data" ] && {
		myerror "Paste does not exist is expired or has been removed"
		exit 3
	}
	clean=$(echo $str | sed -r "s/^.*(\[.*)$/\1/;s/^(.*\]).*$/\1/")
	data=$(echo $clean | sed -r "s/^.*data\":(.*),\"meta.*$/\1/;s/\\\\//g;s/^.//;s/.$//")

	$engine "$path/main.js" $engineopts "$path/" "get" "$key" "$data" 2>&1 >$datafile &
	pid=$!

	dot=".  "
	while ps $pid &>/dev/null; do
		[ $quiet -ne 1 ] && echo -n -e "\rDecrypting data$dot" >&2
		case $dot in
			".  ") dot=".. " ;;
			".. ") dot="..." ;;
			"...") dot=".  " ;;
		esac
		sleep 1
	done

	wait $pid
	ret=$?
	[ $ret -ne 0 ] && {
		[ $quiet -ne 1 ] && echo -e "\rDecrypting data... [failed]" >&2
		myerror "Error: javascript engine returned $ret"
		cat $datafile >&2
		rm $datafile
		exit $ret
	}

	[ $quiet -ne 1 ] && echo -e "\rDecrypting data... [done]" >&2

	cat $datafile
	rm $datafile

	exit 0
}

[ "$get" != "0" ] && get

>$tmpfile

[ "$post" = "1" ] && post "$file"

exit 0
