#!/bin/bash

version="0.2"
tmpfile="/tmp/.zerocli.tmp"
datafile="/tmp/.zerocli.data"
curloutput="/tmp/.zerocli.curl.out"
curlerr="/tmp/.zerocli.curl.err"
curltmp="/tmp/.zerocli.curl.tmp"
server=""
me=$(basename $0)
path=$(dirname $0)
workingdir=""
config=""

ttw=10
burn=0
open=0
syntax=0
expire=1week
get=0
post=1
quiet=0
group=0
file=""
atime="5min 10min 1hour 1day 1week 1month 1year never"

# search fo a config file and load it if present
if [ -d "$path" -a -e "$path/zerocli.conf" ]; then
	. "$path/zerocli.conf"
fi

if [ ! -z "$config" -a -e "$config" ]; then
	. "$config"
fi

if [ -f "$HOME/.zeroclirc" ]; then
	. "$HOME/.zeroclirc"
fi

# set the path variable based on the $workingdir variable
function setpath() {
	if [ ! -z "$workingdir" ]; then
		[ ! -d "$workingdir" ] && {
			cat <<EOF
Error: '$workingdir' no such directory
EOF
			exit 1
		}   
		path=$workingdir
	else
		if [ "$path" != "." ]; then
			echo $path | grep -e "^/" &>/dev/null || {
				path=$(which $me)
				[ -z "$path" ] && {
					cat <<EOF
Error: no working dir found
You can solve this problem either by calling this program with an absolute path
or by adding the script to your PATH or by setting up the 'workingdir' variable
into the script or conf file
EOF
					exit 1
				}   
			}   
		fi  
	fi
}

# DO NOT EDIT THE FOLLOWING LINE!
package='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
'

# Check for rhino
rhino=$(which rhino)
[ ! -x "$rhino" ] && {
	echo "Please install rhino first"
	echo "https://developer.mozilla.org/en-US/docs/Rhino"
	exit 1
}

# Check for curl
curl=$(which curl)
[ ! -x "$curl" ] && {
	echo "Please install curl"
	exit 1
}

# function to extract the archive contained in $package (you can generate a self extractible archive using the compact.sh script)
function unpak() {
	[ -z "$package" ] && return
	required="js/zerocli.js js/base64.js js/flate.js js/jquery.js js/rawdeflate.js js/rawinflate.js js/sjcl.js main.js VERSION"
	br=0
	for f in $required; do
		[ ! -f "$path/$f" ] && {
			rm -rf "$path/main.js" "$path/js" "$path/VERSION" &>/dev/null
			br=1
			break
		}
	done
	v=$(cat VERSION 2>/dev/null)
	[ $br -eq 0 -a "$v" = "$version" ] && return
	# if $br = 1 or version mismatch at least 1 file is missing so we unpack the archive
	sav=$PWD
	cd $path || exit $?
	echo "$package" | base64 -d >package.tgz
	tar xzf package.tgz
	rm package.tgz
	cd $sav
}

# prints a log unless $quiet = 1
function mylog() {
	[ $quiet -ne 1 ] && echo "[i] $*" >&2
}

# prints error in all cases
function myerror() {
	echo "[e] $*" >&2
}

# prints the help menu and exit
function usage() {
	cat <<EOF
$me [options...] [files...]
usage:
	-c, --config <file>   use this configuration file
	-q, --quiet           do not display logs
	-b, --burn            burn after reading
	-o, --open            open discussion
	-s, --syntax          syntax coloring
	-e, --expire <time>   specify the expiration time (default: 1week)
	-f, --file <file>     file to send, you can have multiple (default: read from stdin)
	-g, --get <url>       get data from URL
	-G, --group           group all the specified files
	-p, --post            post data to server (it is the default behaviour)
	-S, --server <server> specify the server url
	-t, --ttw             time to wait between two posts (default: 10)
	-h, --help            prints this menu and exit

available time settings:
5min,10min,1hour,1day,1week,1month,1year,never
EOF
	exit 1
}

# check if the file we want to send is not empty
function testfile() {
	file=$1
	size=$(ls -l $file | awk '{print $5; }')
	test "$size" = "0" && {
		myerror "Could not send empty file"
		[ -f $tmpfile ] && rm $tmpfile
		exit 2
	}
}

# options may be followed by one colon to indicate they have a required argument
options=$(getopt -n "$me" -o "Ghpqbose:f:g:S:c:t::" -l "group,help,put,quiet,burn,open,syntax,expire:,file:,get:,server:,config:,ttw::" -- "$@") || {
	# something went wrong, getopt will put out an error message for us
	usage
}

set -- $options

if [ "$(getopt --version)" = " --" ]; then
	# bsd getopt - skip configuration declarations
	nb_delims_to_remove=2
	while [ $# -gt 0 ]; do
		if [ $1 = "--" ]; then
			shift
			nb_delims_to_remove=$(expr $nb_delims_to_remove - 1)
			if [ $nb_delims_to_remove -lt 1 ]; then
				break
			fi
		fi

		shift
	done
fi

while [ $# -gt 0 ]
do
	case $1 in
		-q|--quiet) quiet=1 ;;
		-b|--burn) burn=1 ;;
		-o|--open) open=1 ;;
		-s|--syntax) syntax=1 ;;
		-p|--post) post=1 ;;
		-h|--help) usage ;;
		-G|--group) group=1 ;;
		# for options with required arguments, an additional shift is required
		-e|--expire) 
			expire=$(echo $2 | sed "s/^.//;s/.$//")
			shift
			t=0
			for e in $atime; do
				if [ "$expire" = "$e" ]; then
					t=1
					break
				fi
			done
			[ $t -ne 1 ] && {
				myerror "Error: '$expire' is not a valide expiration time"
				exit 1
			}
			;;
		-f|--file) file="$file $2" ; shift ;; #$(echo $2 | sed "s/^.//;s/.$//") ; shift ;;
		-g|--get) get=$(echo $2 | sed "s/^.//;s/.$//") ; shift ;;
		-S|--server) server=$(echo $2 | sed "s/^.//;s/.$//") ; shift ;;
		-t|--ttw) ttw=$(echo $2 | sed "s/^.//;s/.$//") ; shift ;;
		-c|--config) 
			config=$(echo $2 | sed "s/^.//;s/.$//")
			shift
			[ ! -e "$config" ] && {
				myerror "Error: '$config' does not exist"
				exit
			}
			. "$config"
			;;
		(--) shift; break ;;
		(-*) myerror "$me: error - unrecognized option $1"; usage ;;
		(*) break ;;
	esac
	shift
done

for arg do file="$file $arg" ; done

setpath

unpak

# verify we have a server address to post data
[ -z "$server" -a "$get" = "0" ] && {
	myerror "Error: You must specify a server in order to post data"
	myerror "You can set it in the script or use the -S argument or the config file"
	exit 1
}

# function that post or get data using curl
function mycurl() {
	url=$1
	data=$2
	if [ -z "$data" ]; then
		output=$($curl -i                                         \
			 -o $curloutput                                       \
			 --stderr $curlerr                                    \
			 $url)
		ret=$?
	else
		echo "$data" >$curltmp
		output=$($curl -i                                         \
			 -H "Content-Type: application/x-www-form-urlencoded" \
			 -X POST                                              \
			 -d @$curltmp                                         \
			 -o $curloutput                                       \
			 --stderr $curlerr                                    \
			 $url)
		ret=$?
		rm $curltmp
	fi
		
	# check the return code
	[ $ret -ne 0 ] && {
		myerror "Error: curl returned $ret"
		myerror "Please refer to curl manpage for more details"
		cat $curlerr >&2
		rm $curlerr $curloutput &>/dev/null
		exit $ret
	}

	# check the HTTP return code
	code=$(grep -e "^HTTP/1\." $curloutput | tail -1 | awk '{print $2;}')
	case $code in
		200)
			[ -z "$data" ] && return
			# When we post data, we expect the Content-Type to be application/json
			ct=$(grep "^Content-Type:" $curloutput | awk '{print $2;}' | perl -pe "s/\r\n$//")
			[ -z "$ct" -o "$ct" != "application/json" ] && {
				myerror "Error: server returned code $code but with content-type '$ct' where 'application/json' is expected"
				rm $curlerr $curloutput &>/dev/null
				exit 6
			}
			mylog "OK server returned code 200" ;;
		302|301)
			redirect=$(grep "^Location:" $curloutput | awk '{print $2;}' | perl -pe "s/\r\n$//")
			mylog "Got a redirection $code to '$redirect'"
			mylog "retrying..."
			mycurl "$redirect" "$data"
			;;
		*) 
			myerror "Error: server returned $code"
			rm $curlerr $curloutput &>/dev/null
			exit 5
			;;
	esac
}

# function that post data
# it cat take a list of file as argument and will send them recursively
function post() {
	myfile=$1
	[ -z "$myfile" ] && {
		cat >$tmpfile <&0
		myfile=$tmpfile
	}

	i=0
	for f in $myfile; do
		i=$(($i+1))
		[ $i -eq 2 ] && break
	done

	[ $i -eq 2 ] && {
		for f in $myfile; do
			if [ $group -eq 0 ]; then
				post $f
				# by default ZeroBin expect us to wait 10s between each post
				mylog "waiting $ttw seconds before next post"
				sleep $ttw
			else
				tmp=$(echo $f | sed "s/^.//;s/.$//")
				cat $tmp >>$tmpfile
				myfile=$tmpfile
			fi
		done
		[ $group -eq 0 ] && return
	}

	[ "$myfile" != "$tmpfile" ] && myfile=$(echo $myfile | sed "s/^.//;s/.$//")

	testfile $myfile
	
	[ $quiet -ne 1 ] && echo >&2

	$rhino "$path/main.js" "$path/" put $myfile 2>&1 >$datafile &
	pid=$!

	dot=".  "
	while ps $pid &>/dev/null; do
		[ $quiet -ne 1 ] && echo -n -e "\rEncrypting data$dot" >&2
		case $dot in
			".  ") dot=".. " ;;
			".. ") dot="..." ;;
			"...") dot=".  " ;;
		esac
		sleep 1
	done

	[ -f $tmpfile ] && rm $tmpfile

	wait $pid
	ret=$?
	[ $ret -ne 0 ] && {
		[ $quiet -ne 1 ] && echo -e "\rEncrypting data... [failed]" >&2
		myerror "Error: rhino returned $ret"
		cat $datafile >&2
		rm $datafile
		exit $ret
	}

	[ $quiet -ne 1 ] && echo -e "\rEncrypting data... [done]" >&2

	key=$(grep "key:" $datafile | sed "s/^key://")

	# we need to 'htmlencode' our data before posting them. We use this hack to handle large data
	encode=$(perl -MURI::Escape -e '@f=<>; foreach (@f) { if (m/^data:/) { s/^data://; print uri_escape($_); exit(0); } }' $datafile)
	rm $datafile
	params="data=$encode&burnafterreading=$burn&expire=$expire&opendiscussion=$open&syntaxcoloring=$syntax"

	mycurl "$server" "$params"

	status=$(tail -1 $curloutput | python -m json.tool 2>/dev/null | grep status | cut -d: -f2 | sed "s/ //g");
	[ -z "$status" -o "$status" != "0" ] && {
		myerror "something went wrong..."
		cat $curloutput >&2
		rm $curlerr $curloutput &>/dev/null
		exit 4
	}
	id=$(tail -1 $curloutput | python -m json.tool | grep id | cut -d: -f2 | sed "s/ //g;s/,//g;s/\"//g");
	deletetoken=$(tail -1 $curloutput | python -m json.tool | grep deletetoken | cut -d: -f2 | sed "s/ //g;s/,//g;s/\"//g");

	# add a / in server if not present
	server=$(echo $server | sed -r "s|^(.+[^/])$|\1/|")

	if [ "$myfile" = "$tmpfile" ]; then
		echo "Your data have been successfully pasted"
	else
		echo "The file '$myfile' has been successfully pasted"
	fi
	echo "url: $server?$id#$key"
	echo "delete url: $server?pasteid=$id&deletetoken=$deletetoken"

	rm $curlerr $curloutput &>/dev/null
}

function get() {

	echo $get | grep -E "^.*\?.*#(.+)$" &>/dev/null
	[ $? -ne 0 ] && {
		myerror "Error: missing key to decrypt data"
		exit 7
	}
	key=$(echo $get | sed -r "s/^.*\?.*#(.+)$/\1/")
	mycurl "$get"
	str=$(grep "cipherdata" $curloutput)
	rm $curlerr $curloutput &>/dev/null
	data=$(echo $str | grep ">\[.*\]<")
	[ -z "$data" ] && {
		myerror "Paste does not exist is expired or has been removed"
		exit 3
	}
	clean=$(echo $str | sed -r "s/^.*(\[.*)$/\1/;s/^(.*\]).*$/\1/")
	data=$(echo $clean | sed -r "s/^.*data\":(.*),\"meta.*$/\1/;s/\\\\//g;s/^.//;s/.$//")

	$rhino "$path/main.js" "$path/" get "$key" "$data" 2>&1 >$datafile &
	pid=$!

	dot=".  "
	while ps $pid &>/dev/null; do
		[ $quiet -ne 1 ] && echo -n -e "\rDecrypting data$dot" >&2
		case $dot in
			".  ") dot=".. " ;;
			".. ") dot="..." ;;
			"...") dot=".  " ;;
		esac
		sleep 1
	done

	wait $pid
	ret=$?
	[ $ret -ne 0 ] && {
		[ $quiet -ne 1 ] && echo -e "\rDecrypting data... [failed]" >&2
		myerror "Error: rhino returned $ret"
		cat $datafile >&2
		rm $datafile
		exit $ret
	}

	[ $quiet -ne 1 ] && echo -e "\rDecrypting data... [done]" >&2

	cat $datafile
	rm $datafile

	exit 0
}

[ "$get" != "0" ] && get

>$tmpfile

[ "$post" = "1" ] && post "$file"

exit 0
