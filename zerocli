#!/bin/bash

version="0.4"
tmpfile="/tmp/.zerocli.tmp"
datafile="/tmp/.zerocli.data"
curloutput="/tmp/.zerocli.curl.out"
curlerr="/tmp/.zerocli.curl.err"
server=""
me=$(basename $0)
path=$(dirname $0)
workingdir=""
config=""

ttw=10
burn=0
open=0
syntax=0
expire=1week
get=0
post=1
quiet=0
group=0
file=""
atime="5min 10min 1hour 1day 1week 1month 1year never"
engine=$(which rhino)
engineopts="rhino"

# search for a config file and load it if present
if [ -d "$path" -a -e "$path/zerocli.conf" ]; then
	. "$path/zerocli.conf"
fi

if [ ! -z "$config" -a -e "$config" ]; then
	. "$config"
fi

if [ -f "$HOME/.zeroclirc" ]; then
	. "$HOME/.zeroclirc"
fi

# set the path variable based on the $workingdir variable
function setpath() {
	if [ ! -z "$workingdir" ]; then
		[ ! -d "$workingdir" ] && {
			cat <<EOF
Error: '$workingdir' no such directory
EOF
			exit 1
		}   
		path=$workingdir
	else
		if [ "$path" != "." ]; then
			echo $path | grep -e "^/" &>/dev/null || {
				path=$(which $me)
				[ -z "$path" ] && {
					cat <<EOF
Error: no working dir found
You can solve this problem either by calling this program with an absolute path
or by adding the script to your PATH or by setting up the 'workingdir' variable
into the script or conf file
EOF
					exit 1
				}   
			}   
		fi  
	fi
}

# DO NOT EDIT THE FOLLOWING LINE!
package='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
43CzALgBAA==
'

[ ! -x "$engine" ] && {
	myerror "Error: '$engine' not found or not executable"
	exit 1
}

# Check for curl
curl=$(which curl)
[ ! -x "$curl" ] && {
	myerror "Please install curl"
	exit 1
}

# function to extract the archive contained in $package (you can generate a self extractible archive using the compact.sh script)
function unpak() {
	[ -z "$package" ] && return
	required="js/zerocli.js js/base64.js js/flate.js js/rawdeflate.js js/rawinflate.js js/sjcl.js main.js VERSION"
	br=0
	for f in $required; do
		[ ! -f "$path/$f" ] && {
			mylog "missing '$path/$f'"
			rm -rf "$path/main.js" "$path/js" "$path/VERSION" &>/dev/null
			br=1
			break
		}
	done
	v=$(cat $path/VERSION 2>/dev/null)
	[ $br -eq 0 -a "$v" = "$version" ] && return
	mylog "Extracting files '$v' -> '$version'"
	# if $br = 1 or version mismatch at least 1 file is missing so we unpack the archive
	sav=$PWD
	cd $path || exit $?
	echo "$package" | base64 -d >package.tgz
	tar xzf package.tgz
	rm package.tgz
	cd $sav
}

# prints a log unless $quiet = 1
function mylog() {
	[ $quiet -ne 1 ] && echo "[i] $*" >&2
}

# prints error in all cases
function myerror() {
	echo "[e] $*" >&2
}

# prints the help menu and exit
function usage() {
	cat <<EOF
$me [options...] [files...]
usage:
	-c, --config <file>   use this configuration file
	-q, --quiet           do not display logs
	-b, --burn            burn after reading
	-o, --open            open discussion
	-s, --syntax          syntax coloring
	-e, --expire <time>   specify the expiration time (default: 1week)
	-f, --file <file>     file to send, you can have multiple (default: read from stdin)
	-g, --get <url>       get data from URL
	-G, --group           group all the specified files
	-p, --post            post data to server (it is the default behaviour)
	-S, --server <server> specify the server url
	-t, --ttw             time to wait between two posts (default: 10)
	-h, --help            prints this menu and exit

available time settings:
5min,10min,1hour,1day,1week,1month,1year,never
EOF
	exit 1
}

# check if the file we want to send is not empty
function testfile() {
	file=$1
	size=$(ls -l $file | awk '{print $5; }')
	test "$size" = "0" && {
		myerror "Could not send empty file"
		[ -f $tmpfile ] && rm $tmpfile
		exit 2
	}
}

# options may be followed by one colon to indicate they have a required argument
options=$(getopt -n "$me" -o "Ghpqbose:f:g:S:c:t::" -l "group,help,put,quiet,burn,open,syntax,expire:,file:,get:,server:,config:,ttw::" -- "$@") || {
	# something went wrong, getopt will put out an error message for us
	usage
}

set -- $options

if [ "$(getopt --version)" = " --" ]; then
	# bsd getopt - skip configuration declarations
	nb_delims_to_remove=2
	while [ $# -gt 0 ]; do
		if [ $1 = "--" ]; then
			shift
			nb_delims_to_remove=$(expr $nb_delims_to_remove - 1)
			if [ $nb_delims_to_remove -lt 1 ]; then
				break
			fi
		fi

		shift
	done
fi

while [ $# -gt 0 ]
do
	case $1 in
		-q|--quiet) quiet=1 ;;
		-b|--burn) burn=1 ;;
		-o|--open) open=1 ;;
		-s|--syntax) syntax=1 ;;
		-p|--post) post=1 ;;
		-h|--help) usage ;;
		-G|--group) group=1 ;;
		# for options with required arguments, an additional shift is required
		-e|--expire) 
			expire=$(echo $2 | sed "s/^.//;s/.$//")
			shift
			t=0
			for e in $atime; do
				if [ "$expire" = "$e" ]; then
					t=1
					break
				fi
			done
			[ $t -ne 1 ] && {
				myerror "Error: '$expire' is not a valid expiration time"
				exit 1
			}
			;;
		-f|--file) file="$file $2" ; shift ;; #$(echo $2 | sed "s/^.//;s/.$//") ; shift ;;
		-g|--get) get=$(echo $2 | sed "s/^.//;s/.$//") ; shift ;;
		-S|--server) server=$(echo $2 | sed "s/^.//;s/.$//") ; shift ;;
		-t|--ttw) ttw=$(echo $2 | sed "s/^.//;s/.$//") ; shift ;;
		-c|--config) 
			config=$(echo $2 | sed "s/^.//;s/.$//")
			shift
			[ ! -e "$config" ] && {
				myerror "Error: '$config' does not exist"
				exit
			}
			. "$config"
			;;
		(--) shift; break ;;
		(-*) myerror "$me: error - unrecognized option $1"; usage ;;
		(*) break ;;
	esac
	shift
done

for arg do file="$file $arg" ; done

setpath

unpak

# verify we have a server address to post data
[ -z "$server" -a "$get" = "0" ] && {
	myerror "Error: You must specify a server in order to post data"
	myerror "You can set it in the script or use the -S argument or the config file"
	exit 1
}

# function that post or get data using curl
function mycurl() {
	url=$1
	data=$2
	if [ -z "$data" ]; then
		output=$($curl -i                                         \
			 -o $curloutput                                       \
			 --stderr $curlerr                                    \
			 $url)
		ret=$?
	else
		output=$(echo -n "$data" | $curl -i                       \
			 -H "Content-Type: application/x-www-form-urlencoded" \
			 -X POST                                              \
			 -d @-                                                \
			 -o $curloutput                                       \
			 --stderr $curlerr                                    \
			 $url)
		ret=$?
	fi
		
	# check the return code
	[ $ret -ne 0 ] && {
		myerror "Error: curl returned $ret"
		myerror "Please refer to curl manpage for more details"
		cat $curlerr >&2
		rm $curlerr $curloutput &>/dev/null
		exit $ret
	}

	# check the HTTP return code
	code=$(grep -e "^HTTP/1\." $curloutput | tail -1 | awk '{print $2;}')
	case $code in
		200)
			[ -z "$data" ] && return
			# When we post data, we expect the Content-Type to be application/json
			ct=$(grep "^Content-Type:" $curloutput | awk '{print $2;}' | perl -pe "s/\r\n$//")
			[ -z "$ct" -o "$ct" != "application/json" ] && {
				myerror "Error: server returned code $code but with content-type '$ct' where 'application/json' is expected"
#				cat $curloutput >&2
				rm $curlerr $curloutput &>/dev/null
				exit 6
			}
			mylog "OK server returned code 200" ;;
		302|301)
			redirect=$(grep "^Location:" $curloutput | awk '{print $2;}' | perl -pe "s/\r\n$//")
			mylog "Got a redirection $code to '$redirect'"
			mylog "retrying..."
			mycurl "$redirect" "$data"
			;;
		*) 
			myerror "Error: server returned $code"
			myerror "Please read this page for more details about HTTP return code: http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
			rm $curlerr $curloutput &>/dev/null
			exit 5
			;;
	esac
}

# function that post data
# it cat take a list of file as argument and will send them recursively
function post() {
	myfile=$1
	[ -z "$myfile" ] && {
		cat >$tmpfile <&0
		myfile=$tmpfile
	}

	i=0
	for f in $myfile; do
		i=$(($i+1))
		[ $i -eq 2 ] && break
	done

	[ $i -eq 2 ] && {
		for f in $myfile; do
			if [ $group -eq 0 ]; then
				post $f
				# by default ZeroBin expect us to wait 10s between each post
				mylog "waiting $ttw seconds before next post"
				sleep $ttw
			else
				tmp=$(echo $f | sed "s/^.//;s/.$//")
				cat $tmp >>$tmpfile
				myfile=$tmpfile
			fi
		done
		[ $group -eq 0 ] && return
	}

	[ "$myfile" != "$tmpfile" ] && myfile=$(echo $myfile | sed "s/^.//;s/.$//")

	testfile $myfile
	
	$engine "$path/main.js" $engineopts "$path/" "post" "$myfile" 2>&1 >$datafile &
	pid=$!

	[ $quiet -ne 1 ] && echo >&2

	dot=".  "
	while ps $pid &>/dev/null; do
		[ $quiet -ne 1 ] && echo -n -e "\rEncrypting data$dot" >&2
		case $dot in
			".  ") dot=".. " ;;
			".. ") dot="..." ;;
			"...") dot=".  " ;;
		esac
		sleep 1
	done

	[ -f $tmpfile ] && rm $tmpfile

	wait $pid
	ret=$?
	[ $ret -ne 0 ] && {
		[ $quiet -ne 1 ] && echo -e "\rEncrypting data... [failed]" >&2
		myerror "Error: javascript engine returned $ret"
		cat $datafile >&2
		rm $datafile
		exit $ret
	}

	[ $quiet -ne 1 ] && echo -e "\rEncrypting data... [done]" >&2

	key=$(grep "key:" $datafile | sed "s/^key://")

	# we need to 'htmlencode' our data before posting them. We use this hack to handle large data
	encode=$(perl -MURI::Escape -e '@f=<>; foreach (@f) { if (m/^data:/) { s/^data://; print uri_escape($_); exit(0); } }' $datafile)
	rm $datafile
	params="data=$encode&burnafterreading=$burn&expire=$expire&opendiscussion=$open&syntaxcoloring=$syntax"

	mycurl "$server" "$params"

	status=$(tail -1 $curloutput | python -m json.tool 2>/dev/null | grep status | cut -d: -f2 | sed "s/ //g");
	[ -z "$status" -o "$status" != "0" ] && {
		myerror "something went wrong..."
		cat $curloutput >&2
		rm $curlerr $curloutput &>/dev/null
		exit 4
	}
	id=$(tail -1 $curloutput | python -m json.tool | grep id | cut -d: -f2 | sed "s/ //g;s/,//g;s/\"//g");
	deletetoken=$(tail -1 $curloutput | python -m json.tool | grep deletetoken | cut -d: -f2 | sed "s/ //g;s/,//g;s/\"//g");

	# add a / in server if not present
	server=$(echo $server | sed -r "s|^(.+[^/])$|\1/|")

	if [ "$myfile" = "$tmpfile" ]; then
		echo "Your data have been successfully pasted"
	else
		echo "The file '$myfile' has been successfully pasted"
	fi
	echo "url: $server?$id#$key"
	echo "delete url: $server?pasteid=$id&deletetoken=$deletetoken"

	rm $curlerr $curloutput &>/dev/null
}

function get() {

	echo $get | grep -E "^.*\?.*#(.+)$" &>/dev/null
	[ $? -ne 0 ] && {
		myerror "Error: missing key to decrypt data"
		exit 7
	}
	key=$(echo $get | sed -r "s/^.*\?.*#(.+)$/\1/")
	mycurl "$get"
	str=$(grep "cipherdata" $curloutput)
	rm $curlerr $curloutput &>/dev/null
	data=$(echo $str | grep ">\[.*\]<")
	[ -z "$data" ] && {
		myerror "Paste does not exist is expired or has been removed"
		exit 3
	}
	clean=$(echo $str | sed -r "s/^.*(\[.*)$/\1/;s/^(.*\]).*$/\1/")
	echo $clean | sed -r "s/^.*data\":(.*),\"meta.*$/\1/;s/\\\\//g;s/^[^{]*//;s/[^}]*$//;s/\s*$//" >$tmpfile

	$engine "$path/main.js" $engineopts "$path/" "get" "$key" "$tmpfile" 2>&1 >$datafile &
	pid=$!

	dot=".  "
	while ps $pid &>/dev/null; do
		[ $quiet -ne 1 ] && echo -n -e "\rDecrypting data$dot" >&2
		case $dot in
			".  ") dot=".. " ;;
			".. ") dot="..." ;;
			"...") dot=".  " ;;
		esac
		sleep 1
	done

	wait $pid
	ret=$?
	rm $tmpfile
	[ $ret -ne 0 ] && {
		[ $quiet -ne 1 ] && echo -e "\rDecrypting data... [failed]" >&2
		myerror "Error: javascript engine returned $ret"
		cat $datafile >&2
		rm $datafile
		exit $ret
	}

	[ $quiet -ne 1 ] && echo -e "\rDecrypting data... [done]" >&2

	cat $datafile
	rm $datafile

	exit 0
}

[ "$get" != "0" ] && get

>$tmpfile

[ "$post" = "1" ] && post "$file"

exit 0
